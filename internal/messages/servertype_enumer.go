// Code generated by "enumer -type=ServerType -json"; DO NOT EDIT.

package messages

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ServerTypeName = "ServerTypeRequestServerTypeResponse"

var _ServerTypeIndex = [...]uint8{0, 17, 35}

const _ServerTypeLowerName = "servertyperequestservertyperesponse"

func (i ServerType) String() string {
	if i < 0 || i >= ServerType(len(_ServerTypeIndex)-1) {
		return fmt.Sprintf("ServerType(%d)", i)
	}
	return _ServerTypeName[_ServerTypeIndex[i]:_ServerTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ServerTypeNoOp() {
	var x [1]struct{}
	_ = x[ServerTypeRequest-(0)]
	_ = x[ServerTypeResponse-(1)]
}

var _ServerTypeValues = []ServerType{ServerTypeRequest, ServerTypeResponse}

var _ServerTypeNameToValueMap = map[string]ServerType{
	_ServerTypeName[0:17]:       ServerTypeRequest,
	_ServerTypeLowerName[0:17]:  ServerTypeRequest,
	_ServerTypeName[17:35]:      ServerTypeResponse,
	_ServerTypeLowerName[17:35]: ServerTypeResponse,
}

var _ServerTypeNames = []string{
	_ServerTypeName[0:17],
	_ServerTypeName[17:35],
}

// ServerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ServerTypeString(s string) (ServerType, error) {
	if val, ok := _ServerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ServerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ServerType values", s)
}

// ServerTypeValues returns all values of the enum
func ServerTypeValues() []ServerType {
	return _ServerTypeValues
}

// ServerTypeStrings returns a slice of all String values of the enum
func ServerTypeStrings() []string {
	strs := make([]string, len(_ServerTypeNames))
	copy(strs, _ServerTypeNames)
	return strs
}

// IsAServerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ServerType) IsAServerType() bool {
	for _, v := range _ServerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ServerType
func (i ServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ServerType
func (i *ServerType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ServerType should be a string, got %s", data)
	}

	var err error
	*i, err = ServerTypeString(s)
	return err
}
